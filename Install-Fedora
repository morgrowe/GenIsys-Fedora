#!/bin/bash
#
# Script to install the packages used on Fedora 24
#   created on 10 Sep 2016 - simon@wiremoons.com based on Ubuntu 16.04 setup script
#	see Git log for additional updates and changes
#
#
# location of configuration and setup files - obtained from Git repo
GENIFILES='/home/simon/GenIsys-Fedora'
#
printf "\n"
printf "\n\t\tFedora 24 - package installer\n"
printf "\n"
printf "Running with following details\n\n"
printf "\tScript: '%s'\n\tGenIsys Files Location:'%s'\n\tHostname:'%s'\n\tOS: '%s'\n\tUser '%s'\n\n" \
            "$0" "$GENIFILES" "$HOSTNAME" "$(uname)" "$(whoami)"
printf "\nThis installation script should be run after completing a 'server' or 'desktop' install of Fedora 24.\n"
printf "\nEnter your password when prompted, so 'sudo' can be used to install packages and setup the computer for you\n\n"
sleep 2
#
# set the hostname for the computer
printf "\nQUESTION:\n"
read -p "Enter the hostname for your computer : " -t 30 -re REPLY
if [[ $REPLY != "" ]] && [[ $REPLY != $(hostname) ]] ; then
    sudo hostnamectl set-hostname "$REPLY"
    printf "\n\tComputer hostname now set to: '$(hostname)' - DONE\n"
else
    printf "\nYou may need to set the hostname for your computer with:  sudo hostnamectl set-hostname \"pc-name-here\"\n"
	printf "Current hostname is set to: '$(hostname)'\n"
fi
sleep 2
#
# ensure the packages lists is up to date
sudo dnf -y update
#
# install Fedora base packages we need
sudo dnf -y install p7zip p7zip-plugins rlwrap ncdu fuse-sshfs clamav fail2ban \
kernel-devel kernel-headers gcc dkms acpid aspell aspell-en emacs-nox screen
#
# install antivirus
#sudo freshclam
#
#
# Install RPM Fusion repos for additonal packages - if required by user...
printf "\nQUESTION:\n"
read -p "Do you want to install 'RPM Fusion repos' to obtain full range of Linux software?  y/n " -t 30 -re REPLY
if [ $REPLY == y ] || [ $REPLY == Y ] ; then
	# check if the 4 x repos exists (ie free + free updates + non-free + non-free updates)
	if [ $(dnf repolist | grep -ic "rpmfusion") -lt 4 ] ; then
		# add RPM Fusion Software Repos for 'free' and 'non-free' - check with 'dnf repolist' or 'dnf repolist all'
		printf "Adding 'free' and 'non-free' RPM Fusion repos...\n"
		sudo dnf -y install http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
		sudo dnf -y install http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
		# now ensure the keys and package lists are up to date for above new RPM Fusion
		sudo dnf -y update
		printf "\nDONE\n"
	else
		printf "RPM Fussion repos already added to computer!\n"
	fi
else
    printf "\nAdditional RPM Fusion repos NOT installed at user's request\n"
fi
sleep 2
#
#
# Install additional 'desktop' packages also if required by user...
printf "\nQUESTION:\n"
read -p "Do you want to install additional 'desktop' type packages?  y/n " -t 30 -re REPLY
if [ $REPLY == y ] || [ $REPLY == Y ] ; then
	#
	printf "Adding additonal desktop software..."
    sudo dnf -y install vlc rdesktop gimp gnome-tweak-tool simple-scan
    printf "\nDONE\n"
else
    printf "\nAdditional packages NOT installed at user's request\n"
fi
sleep 2
#
#
# If running on the server - do some extra setup as needed...
if [ $HOSTNAME == coremoons ] ; then
	# Install dhcpd if not running on the server
	if [ $(systemctl is-active dhcpd.service) == "inactive" ] ; then
		printf "\nQUESTION:\n"
		read -p "SERVER ONLY: Do you want to install 'dhcpd' and start the server packages?  y/n " -t 30 -re REPLY
		if [ $REPLY == y ] || [ $REPLY == Y ] ; then
			printf "Setting up 'dhcpd server'...\n"
			sudo dnf install  dhcpd-server
			if [ -f /etc/dhcp/dhcpd.conf ] ; then
				printf "Adding GenIsys config file...\n"
				sudo cp /etc/dhcp/dhcpd.conf /etc/dhcp/dhcpd.conf-$(date -d "today" +"%Y-%m-%d_%H.%M")
				sudo cp $GENIFILES/configs/dhcpd.conf /etc/dhcp/dhcpd.conf
				sudo systemctl enable dhcpd.service
				sudo systemctl start dhcpd.service
				sudo systemctl status dhcpd.service
			    printf "dhcpd server displayed above OK??\n"
			    printf "\nDONE\n"
			fi
		else
		    printf "\nAdditional dhcpd packages NOT installed at user's request\n"
		fi
		sleep 2
	fi
	#
	# add additional packages only used on server
	sudo dnf install pygpgme dropbox nautilus-dropbox
	printf "\nDONE\n"
	#
	# add firewall exception files for firewalld
	# TODO: fix below as checking does not work as only root can access these files...
	printf "Adding 'firewalld' service exception files - if needed...\n"
	if [ ! -f /etc/firewalld/services/Syncthing.xml ] ; then
		sudo cp $GENIFILES/configs/Syncthing.xml /etc/firewalld/services/Syncthing.xml
		printf "Added 'firewalld' service exception file for:  Syncthing\n"
	fi
	if [ ! -f /etc/firewalld/services/PlexMediaServer.xml ] ; then
		sudo cp $GENIFILES/configs/PlexMediaServer.xml /etc/firewalld/services/PlexMediaServer.xml
		printf "Added 'firewalld' service exception file for:  PlexMediaServer\n"
	fi
	printf "\nDONE\n"

# finish server setup block
fi
#
#
# Install Nvidia graphics card driver if required by the user
#    remove with:  dnf remove xorg-x11-drv-nvidia\*
printf "\nQUESTION:\n"
read -p "Install nVidia graphics card drivers - using RPM Fusion?  y/n " -t 30 -re REPLY
if [ $REPLY == y ] || [ $REPLY == Y ] ; then
	printf "\nDRIVER INSTALL - nVidia\n"
	sudo dnf install xorg-x11-drv-nvidia akmod-nvidia "kernel-devel-uname-r == $(uname -r)" \
		 xorg-x11-drv-nvidia xorg-x11-drv-nvidia-cuda vdpauinfo libva-vdpau-driver libva-utils
	sudo dnf update -y
	printf "\n    nVidia Driver Install - ** restart computer to enable! **\n\n"
	printf "      NOTE: You may need to reboot twice as kernel kmods are built first boot\n"
	printf "            - which may not work until second boot. Use: 'Ctrl + Alt + F3' to \n"
	printf "           access a virtual console, login and reboot.\n\n"
else
    printf "\nnVidia Driver packages NOT installed at user's request\n"
fi
sleep 3
#
#
# clean up any packages still left over that need to be cleaned out
sudo dnf -y autoremove
#
#
# check locale setting
printf "\nSYSTEM LOCALE STATUS:\n"
sudo localectl status
printf "Checking for UTF-8 supprt in terminal...  "
echo -e '\n        \xe2\x82\xac\n'
printf "Euro symbol displayed above OK??\n"
printf "\nQUESTION:\n"
read -p "Do you want to locale setup for 'en_GB.UTF-8'?  y/n " -t 30 -re REPLY
if [ $REPLY == y ] || [ $REPLY == Y ] ; then
    printf "\nLOCALE SETUP\n"
    sudo localectl set-locale LANG=en_GB.utf8
    printf "Checking for UTF-8 supprt in terminal...  "
    echo -e '\n        \xe2\x82\xac\n'
    printf "Euro symbol displayed above OK??\n"
    printf "\nDONE\n"
else
    printf "\nLocale setup not run at user's request\n"
fi
sleep 2
#
# 
# make sure journald logs are persistent across reboots
printf "\nQUESTION:\n"
read -p "Do you want to make systemd-journal persistant across reboots?  y/n " -t 30 -re REPLY
if [ $REPLY == y ] || [ $REPLY == Y ] ; then
    printf "\nJOURNALD SETUP\n"
	sudo systemd-tmpfiles --create --prefix /var/log/journal
	sudo systemctl restart systemd-journald
	sudo gpasswd -a simon systemd-journal
    printf "\nDONE\n"
else
    printf "\nJournald setup not run at user's request\n"
fi
sleep 2
#
# 
# make sure the setting 'swappiness' has a value of '1'
printf "\nQUESTION:\n"
read -p "Do you want to make 'swappiness' have a value of '1'?  y/n " -t 30 -re REPLY
if [ $REPLY == y ] || [ $REPLY == Y ] ; then
    printf "\nSWAPPINESS SETUP\n"
	if [ $(grep -ic "vm.swappiness = 1" /etc/sysctl.d/99-sysctl.conf ) -gt 0 ] ; then
		printf "swappiness already set to '1' in file: '/etc/sysctl.d/99-sysctl.conf'\n"
	else
		printf "Setting swappiness to '1' in file: '/etc/sysctl.d/99-sysctl.conf'\n"
		sudo printf "\n%s\n" "vm.swappiness = 1" | sudo tee -a /etc/sysctl.d/99-sysctl.conf
	fi
	sudo sysctl -w vm.swappiness=1
    printf "\nDONE\n"
else
    printf "\nSwappiness setup not run at user's request\n"
fi
sleep 2
#
#
# start now and enable on boot Openssh server if not running...
if [ $(systemctl is-active sshd.service) == "inactive" ] ; then
	printf "\nQUESTION:\n"
	read -p "Do you want to enable and start Openssh server?  y/n " -t 30 -re REPLY
	if [ $REPLY == y ] || [ $REPLY == Y ] ; then
	    printf "\nOPENSSH SERVER SETUP\n"
	    sudo systemctl enable sshd.service
	    sudo systemctl start sshd.service
	    printf "Checking Openssh server status...  "
	    sudo systemctl status sshd.service
	    printf "Openssh server displayed above OK??\n"
	    printf "\nDONE\n"
	else
	    printf "\nOpenssh Server setup not run at user's request\n"
	fi
	sleep 2
fi

#
#
# Add 'Sublime text 3' editor to the computer
printf "\nQUESTION:\n"
read -p "Do you want to install 'SublimeText 3' ?  y/n " -t 30 -re REPLY
if [ $REPLY == y ] || [ $REPLY == Y ] ; then
    printf "\nSUBLIMETEXT SETUP\n"
	# create a place to put the downloaded file if needed
	if [ ! -d $HOME/scratch ] ; then
		printf "Creating directory ~/scratch...\n"
		mkdir $HOME/scratch
	fi
	# check it is not already installed...
	printf "Checking foir existing installation in '/opt/sublime_text/'...\n"
	if [ ! -d /opt/sublime_text ] ; then
		printf "Downloading 'SublimeText' file from  'www.sublimetext.com'...\n"
		if [ -x /usr/bin/curl ] ; then
			curl https://download.sublimetext.com/sublime_text_3_build_3126_x64.tar.bz2 -o $HOME/scratch/sublimetext3.tar.bz2
			printf "Installing SublimeText to '/opt/sublime_text/' directory...\n"
			cd $HOME/scratch/
			tar -xjf ./sublimetext3.tar.bz2
			sudo mv $HOME/scratch/sublime_text_3 /opt/sublime_text
		else
			printf "\nERROR: Unable to find: '/usr/bin/curl'\n"
		fi
	else
		printf "SublimeText already installed!\n"
	fi
    printf "\nDONE\n"
else
    printf "\nSublimeText setup not run at user's request\n"
fi
sleep 2

#
#
# Add in '/etc/hosts' block list
printf "\nQUESTION:\n"
read -p "Do you want to install '/etc/hosts' block list ?  y/n " -t 30 -re REPLY
if [ $REPLY == y ] || [ $REPLY == Y ] ; then
    printf "\nHOSTS BLOCK LIST SETUP\n"
	if [ ! -d $HOME/scratch ] ; then
		printf "Creating directory ~/scratch...\n"
		mkdir $HOME/scratch
	fi
	printf "Downloading new '/etc/hosts' file from GitHub to '~/scratch' directory...\n"
	if [ -x /usr/bin/curl ] ; then
		curl https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts -o $HOME/scratch/hosts
		printf "Installing new '/etc/hosts' file...\n"
		sudo cp /etc/hosts /etc/hosts-backup-$(date +%Y%b%d_%H%M%S)
		sudo cp $HOME/scratch/hosts /etc/hosts
		printf "Restarting DNS resolver...\n"
		sudo systemctl restart NetworkManager.service
	else
		printf "\nERROR: Unable to find: '/usr/bin/curl'\n"
	fi
    printf "\nDONE\n"
else
    printf "\nBlock list setup not run at user's request\n"
fi
sleep 2
#
#
# Update font cache if needed?
printf "\nQUESTION:\n"
read -p "Do you want to update the system font cache ?  y/n " -t 30 -re REPLY
if [ $REPLY == y ] || [ $REPLY == Y ] ; then
    printf "\nREFRESH SYSTEM FONT CACHE\n"
	fc-cache -fv
    printf "\nDONE\n"
else
    printf "\nFont cache refresh not run at user's request\n"
fi
sleep 2

#
# add /etc/issue and /etc/issue.net


#
#
# update /etc/issue and /etc/issue.net if required
# cat /home/simon/GenIsys-Fedora/configs/issue >> /usr/lib/issue.net
# cat /home/simon/GenIsys-Fedora/configs/issue >> /usr/lib/issue
#
# TODO: change '/etc/ssh/sshd_config' to block root logins & issue banner enable
#
# Install and setup complete - update user and finish up
printf "\nINSTALL COMPLETE"
printf "\nPlease run:\n\t - sensors-detect\n\t - sudo gpasswd -a simon fuse"
printf "\nOther packages to consider are:\n\thandbrake / minidlna / mdadm / pm-utils / kernel-wedge"
printf "\n\tjed / jed-extra / btrfs-tools / nautilus-dropbox \n\n"
printf "You can view all your install packages with the command:  dnf list installed | more\n"
printf "\nEXIT\n"

